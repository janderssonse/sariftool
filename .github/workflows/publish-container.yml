name: Create and publish Docker images

on: [workflow_call] # yamllint disable-line rule:truthy

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sariftool

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: sariftool-bin-ubuntu-latest

      - name: "Unzip and rename binary"
        run: |
          unzip sariftool-bin-ubuntu-latest 
          find . -maxdepth 1 -iname 'sariftool-?.?.?*' -not -iname '*.txt'  -type f -exec cp -v {} sariftool  \;
          chmod a+x sariftool

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Inspect builder
        run: |
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for distribution image
        id: metadist
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=raw,value={{branch}},priority=1,enable=${{ !startsWith(github.ref, 'refs/tags/v') }}
            type=ref,event=tag,priority=2
            type=raw,value=${{ env.IMAGE_NAME }}-{{branch}}-{{date 'YYYYMMDD'}}-{{sha}},priority=31,enable=${{ !startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=${{ env.IMAGE_NAME }}-{{tag}}-{{date 'YYYYMMDD'}}-{{sha}},priority=32, enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build and push distribution image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=min
          platforms: linux/amd64
          push: true
          tags: ${{ steps.metadist.outputs.tags }}
          labels: ${{ steps.metadist.outputs.labels }}
